// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int        @id @default(autoincrement())
  username      String     @unique
  email         String     @unique
  hash          String
  first_name    String?
  last_name     String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  Workouts      Workout[]
  UserExercises Exercise[]

  @@map("users")
}

model Workout {
  workout_id   Int                 @id @default(autoincrement())
  workout_name String
  user         User                @relation(fields: [user_id], references: [user_id])
  user_id      Int
  created_at   DateTime            @default(now())
  updated_at   DateTime            @updatedAt
  exercises    ExerciseInWorkout[]

  @@map("workouts")
}

model DefaultExercise {
  default_exercise_id Int    @id @default(autoincrement())
  exercise_name       String

  @@map("defaultExercises")
}

model Exercise {
  exercise_id          Int                   @id @default(autoincrement())
  exercise_name        String
  user                 User                  @relation(fields: [user_id], references: [user_id])
  user_id              Int
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt
  ExerciseMuscleGroups ExerciseMuscleGroup[]
  ExerciseDays         ExerciseDay[]

  workouts ExerciseInWorkout[]

  @@unique([user_id, exercise_name])
  @@map("exercises")
}

model ExerciseInWorkout {
  exercise    Exercise @relation(fields: [exercise_id], references: [exercise_id])
  exercise_id Int

  workout    Workout @relation(fields: [workout_id], references: [workout_id])
  workout_id Int

  @@id([exercise_id, workout_id])
}

// model WorkoutExercise {
//   workout_exercise_id  Int                   @id @default(autoincrement())
//   workout              Workout               @relation(fields: [workout_id], references: [workout_id])
//   workout_id           Int
//   exercise_name        String
//   created_at           DateTime              @default(now())
//   updated_at           DateTime              @updatedAt
//   Sets                 Set[]
//   ExerciseMuscleGroups ExerciseMuscleGroup[]

//   @@unique([workout_exercise_id, workout_id])
//   @@map("workoutExercises")
// }

model ExerciseDay {
  exercise_day_id Int      @id @default(autoincrement())
  exercise        Exercise @relation(fields: [exercise_id], references: [exercise_id])
  exercise_id     Int
  createdAt       DateTime @default(now())
  updated_at      DateTime @updatedAt
  Sets            Set[]
  date            String

  @@map("exerciseDays")
}

model Set {
  set_id          Int         @id @default(autoincrement())
  exerciseDay     ExerciseDay @relation(fields: [exercise_day_id], references: [exercise_day_id])
  exercise_day_id Int
  reps            Int
  weight          Decimal
  createdAt       DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  @@map("sets")
}

model MuscleGroup {
  musclegroup_id       Int                   @id @default(autoincrement())
  musclegroup_name     String                @unique
  ExerciseMuscleGroups ExerciseMuscleGroup[]

  @@map("musclegroups")
}

model ExerciseMuscleGroup {
  exercise       Exercise    @relation(fields: [exercise_id], references: [exercise_id])
  exercise_id    Int
  musclegroup    MuscleGroup @relation(fields: [musclegroup_id], references: [musclegroup_id])
  musclegroup_id Int

  @@unique([exercise_id, musclegroup_id])
  @@map("exerciseMuscleGroups")
}
